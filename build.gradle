
setDescription("CucumberJVM")

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'


repositories {
    mavenCentral()
    mavenLocal()
}

idea {
    module {
        testSourceDirs += file('src/tests/features')
        jdkName = '1.7'
    }
}

sourceSets {
    main {
        java {
            srcDirs =  ['src/tests']
        }
    }
}

configurations {
    cucumberRuntime.extendsFrom testRuntime
}


ext.seleniumVersion = '2.41.0'


dependencies {
    compile group: 'org.seleniumhq.selenium', name: 'selenium-firefox-driver', version:seleniumVersion
    compile group: 'org.seleniumhq.selenium', name: 'selenium-chrome-driver', version:seleniumVersion
    compile group: 'org.seleniumhq.selenium', name: 'selenium-api', version:seleniumVersion
    compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version:seleniumVersion
    compile group: 'junit', name: 'junit', version: '4.11'
    compile group: 'org.reflections', name: 'reflections', version: '0.9.9-RC1'
    compile group: 'org.apache.commons', name: 'commons-io', version:'1.3.2'
    compile group: 'info.cukes', name: 'cucumber-junit', version: '1.2.2'
    compile group: 'info.cukes', name: 'cucumber-java', version: '1.2.2'
    compile group: 'info.cukes', name: 'cucumber-picocontainer', version: '1.2.2'
}

task aggregateTestReports(type: TestReport) {
    destinationDir = testReportDir
    reportOn test
}

task cleanFunctionalTestRunners(type: Delete) {
    delete fileTree('src/tests/cucumber/runners').include('*.java'), 'reports/runners'
}

task functionalTestCreator << {
    def features = fileTree('src/tests/cucumber/feature').include('**/*.feature')

    def count = 0
    def tags =  "\"~@pending\""
    if (tag) {
        tags += sprintf(",\"@%s\"", tag)
    }

    println "Features being tested:" + features.files
    println "Tags: " + tags

    features.each { File feature_file ->
        def featureName = feature_file.name.split("\\.").first()
        copy {
            from 'src/tests/runners/template'
            into 'src/tests/cucumber/runners'
            expand([featureFilePath: feature_file.path, testRunnerClassName: featureName, tags: tags])
            rename 'RunTests.java.template', featureName + '.java'
            include 'RunTests.java.template'
        }
        count ++
    }
}

functionalTestCreator.dependsOn cleanFunctionalTestRunners
compileJava.dependsOn functionalTestCreator
compileTestJava.dependsOn functionalTestCreator

task generateFunctionalTestReport << {
    def tests = fileTree('src/tests/cucumber/runners/template').include('*.java')
    tests.each { test ->
        def test_name = test.name.split("\\.").first()
        def report = '<script src="runners/' + test_name + '/report.js"></script>'
        reports += report
    }

    copy {
        from 'reports'
        into 'reports'
        expand([report_scripts: reports])
        rename 'report.html.template', 'report.html'
        include 'report.html.template'
    }
}

task RunTests(type: Test) {
    outputs.upToDateWhen {
        false
    }
    dependsOn functionalTestCreator
    finalizedBy generateFunctionalTestReport
    testLogging {
        showStandardStreams = true
    }
    testClassesDir = file('build/classes/main')
    classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
    maxParallelForks = 4
    forkEvery = 1
}